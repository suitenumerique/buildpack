#!/bin/bash

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# Function to output step messages
indent() {
  sed -u 's/^/       /'
}

# Function to read environment variables
read_env() {
  local env_dir=$1
  local var_name=$2
  local default_value=$3
  
  if [ -f "$env_dir/$var_name" ]; then
    cat "$env_dir/$var_name"
  else
    echo "$default_value"
  fi
}

# Read environment configuration
APP_NAME=$(read_env "$ENV_DIR" "LASUITE_APP_NAME" "")
FRONTEND_DIR=$(read_env "$ENV_DIR" "LASUITE_FRONTEND_DIR" "src/frontend")
MAIL_DIR=$(read_env "$ENV_DIR" "LASUITE_MAIL_DIR" "src/mail")
BACKEND_DIR=$(read_env "$ENV_DIR" "LASUITE_BACKEND_DIR" "src/backend")
NGINX_DIR=$(read_env "$ENV_DIR" "LASUITE_NGINX_DIR" "")
SCRIPT_PRE=$(read_env "$ENV_DIR" "LASUITE_SCRIPT_PRECOMPILE" "")
SCRIPT_POSTFRONTEND=$(read_env "$ENV_DIR" "LASUITE_SCRIPT_POSTFRONTEND" "")
SCRIPT_POSTBACKEND=$(read_env "$ENV_DIR" "LASUITE_SCRIPT_POSTBACKEND" "")
SCRIPT_POST=$(read_env "$ENV_DIR" "LASUITE_SCRIPT_POSTCOMPILE" "")
FRONTEND_BUILDPACK=$(read_env "$ENV_DIR" "LASUITE_FRONTEND_BUILDPACK" "https://github.com/Scalingo/nodejs-buildpack")
BACKEND_BUILDPACK=$(read_env "$ENV_DIR" "LASUITE_BACKEND_BUILDPACK" "https://github.com/Scalingo/python-buildpack")
NGINX_BUILDPACK=$(read_env "$ENV_DIR" "LASUITE_NGINX_BUILDPACK" "https://github.com/Scalingo/nginx-buildpack")

echo "-----> La Suite NumÃ©rique buildpack. App name: $APP_NAME"

# Download and extract frontend buildpack
FRONTEND_BUILDPACK_DIR="/tmp/frontend-buildpack"

if [ ! -d "$FRONTEND_BUILDPACK_DIR" ]; then
  echo "-----> Fetching frontend buildpack: $FRONTEND_BUILDPACK"
  git clone "$FRONTEND_BUILDPACK" "$FRONTEND_BUILDPACK_DIR" 2>&1 | indent
fi

# Download and extract backend buildpack
BACKEND_BUILDPACK_DIR="/tmp/backend-buildpack"

if [ ! -d "$BACKEND_BUILDPACK_DIR" ]; then
  echo "-----> Fetching backend buildpack: $BACKEND_BUILDPACK"
  git clone "$BACKEND_BUILDPACK" "$BACKEND_BUILDPACK_DIR" 2>&1 | indent
fi

# Download and extract Nginx buildpack if needed
if [ ! -z "$NGINX_DIR" ]; then
  NGINX_BUILDPACK_DIR="/tmp/nginx-buildpack"
  
  if [ ! -d "$NGINX_BUILDPACK_DIR" ]; then
    echo "-----> Fetching Nginx buildpack: $NGINX_BUILDPACK"
    git clone "$NGINX_BUILDPACK" "$NGINX_BUILDPACK_DIR" 2>&1 | indent
  fi
fi

# Run pre-compile script if it exists
if [ ! -z "$SCRIPT_PRE" ]; then
  echo "-----> Running pre-compile script: $SCRIPT_PRE"
  (cd "$BUILD_DIR" && chmod +x "$SCRIPT_PRE" && sh -c "$SCRIPT_PRE") 2>&1 | indent
fi

# Build frontend, if the directory exists
if [ -d "$BUILD_DIR/$FRONTEND_DIR" ]; then
  echo "-----> Building frontend in $FRONTEND_DIR"
  "$FRONTEND_BUILDPACK_DIR/bin/compile" "$BUILD_DIR/$FRONTEND_DIR" "$CACHE_DIR/frontend" "$ENV_DIR" 2>&1 | indent
fi

# Build mails ( it must be done before frontend, because the postfrontend script usually moves the src/backend dir to .)
if [ -d "$BUILD_DIR/$MAIL_DIR" ]; then
  echo "-----> Building mails in $MAIL_DIR"
  "$FRONTEND_BUILDPACK_DIR/bin/compile" "$BUILD_DIR/$MAIL_DIR" "$CACHE_DIR/mail" "$ENV_DIR" 2>&1 | indent
fi

# Run post-frontend script if it exists
if [ ! -z "$SCRIPT_POSTFRONTEND" ]; then
  echo "-----> Running post-frontend script: $SCRIPT_POSTFRONTEND"
  (cd "$BUILD_DIR" && chmod +x "$SCRIPT_POSTFRONTEND" && sh -c "$SCRIPT_POSTFRONTEND") 2>&1 | indent
fi

# Build backend, if the directory exists
if [ -d "$BUILD_DIR/$BACKEND_DIR" ]; then
  echo "-----> Building backend in $BACKEND_DIR"
  if [ "$BACKEND_DIR" == "." ]; then
    # There is a special case in the Python buildpack when BUILD_DIR==/app
    "$BACKEND_BUILDPACK_DIR/bin/compile" "$BUILD_DIR" "$CACHE_DIR/backend" "$ENV_DIR" 2>&1 | indent
  else
    "$BACKEND_BUILDPACK_DIR/bin/compile" "$BUILD_DIR/$BACKEND_DIR" "$CACHE_DIR/backend" "$ENV_DIR" 2>&1 | indent
  fi
fi

# Run post-backend script if it exists
if [ ! -z "$SCRIPT_POSTBACKEND" ]; then
  echo "-----> Running post-backend script: $SCRIPT_POSTBACKEND"
  (cd "$BUILD_DIR" && chmod +x "$SCRIPT_POSTBACKEND" && sh -c "$SCRIPT_POSTBACKEND") 2>&1 | indent
fi

# Build Nginx if configured
if [ ! -z "$NGINX_DIR" ]; then
  echo "-----> Building Nginx in $NGINX_DIR"
  "$NGINX_BUILDPACK_DIR/bin/compile" "$BUILD_DIR/$NGINX_DIR" "$CACHE_DIR/nginx" "$ENV_DIR" 2>&1 | indent
fi

# Run post-compile script if it exists
if [ ! -z "$SCRIPT_POST" ]; then
  echo "-----> Running post-compile script: $SCRIPT_POST"
  (cd "$BUILD_DIR" && chmod +x "$SCRIPT_POST" && sh -c "$SCRIPT_POST") 2>&1 | indent
fi

echo "-----> Build completed"
